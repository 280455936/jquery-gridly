// Generated by CoffeeScript 1.4.0

/*
jQuery Gridly
Copyright 2013 Kevin Sylvestre
*/


(function() {
  "use strict";

  var $, Animation, Gridly,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = jQuery;

  Animation = (function() {

    function Animation() {}

    Animation.transitions = {
      "webkitTransition": "webkitTransitionEnd",
      "mozTransition": "mozTransitionEnd",
      "msTransition": "msTransitionEnd",
      "oTransition": "oTransitionEnd",
      "transition": "transitionend"
    };

    Animation.transition = function($el) {
      var el, result, type, _ref;
      el = $el[0];
      _ref = this.transitions;
      for (type in _ref) {
        result = _ref[type];
        if (el.style[type] != null) {
          return result;
        }
      }
    };

    Animation.execute = function($el, callback) {
      var transition;
      transition = this.transition($el);
      if (transition != null) {
        return $el.one(transition, callback);
      } else {
        return callback();
      }
    };

    return Animation;

  })();

  Gridly = (function() {

    Gridly.settings = {
      base: 60,
      gutter: 20,
      columns: 12,
      draggable: 'enable'
    };

    Gridly.gridly = function($el, options) {
      if (options == null) {
        options = {};
      }
      return new Gridly($el, options);
    };

    function Gridly($el, settings) {
      if (settings == null) {
        settings = {};
      }
      this.layout = __bind(this.layout, this);

      this.structure = __bind(this.structure, this);

      this.position = __bind(this.position, this);

      this.stop = __bind(this.stop, this);

      this.drag = __bind(this.drag, this);

      this.$ = __bind(this.$, this);

      this.$el = $el;
      this.settings = $.extend({}, Gridly.settings, settings);
    }

    Gridly.prototype.$ = function(selector) {
      return this.$el.find(selector);
    };

    Gridly.prototype.grow = function() {
      return this.grid.push();
    };

    Gridly.prototype.compare = function($dragging, $static) {
      var position, x, y;
      if ($draggging === $static) {
        return 'equal';
      }
      position = $element.position();
      x = $element.position().left + $element.width() / 2;
      return y = $element.position().top + $element.height() / 2;
    };

    Gridly.prototype.draggable = function() {
      return this.$('> *').draggable({
        zIndex: 800,
        drag: this.drag,
        stop: this.stop
      });
    };

    Gridly.prototype.drag = function(event, ui) {
      var $element, position, x, y;
      $element = $(event.target);
      position = $element.position();
      x = $element.position().left + $element.width() / 2;
      y = $element.position().top + $element.height() / 2;
      return this.structure(this.$('> *'));
    };

    Gridly.prototype.stop = function(event, ui) {
      return setTimeout(this.layout, 0);
    };

    Gridly.prototype.position = function($element, columns) {
      var column, height, i, max, size, _i, _j, _ref, _ref1;
      size = (($element.data('width') || $element.width()) + this.settings.gutter) / (this.settings.base + this.settings.gutter);
      height = Infinity;
      column = 0;
      for (i = _i = 0, _ref = columns.length - size; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        max = Math.max.apply(Math, columns.slice(i, i + size));
        if (max < height) {
          height = max;
          column = i;
        }
      }
      for (i = _j = column, _ref1 = column + size; column <= _ref1 ? _j < _ref1 : _j > _ref1; i = column <= _ref1 ? ++_j : --_j) {
        columns[i] = height + ($element.data('height') || $element.height()) + this.settings.gutter;
      }
      return {
        x: column * (this.settings.base + this.settings.gutter),
        y: height
      };
    };

    Gridly.prototype.structure = function($elements) {
      var columns, i, positions,
        _this = this;
      if ($elements == null) {
        $elements = this.$('> *');
      }
      positions = [];
      columns = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = this.settings.columns; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(0);
        }
        return _results;
      }).call(this);
      $elements.each(function(index, element) {
        var $element, position;
        $element = $(element);
        position = _this.position($element, columns);
        return positions.push({
          $element: $element,
          x: position.x,
          y: position.y,
          w: $element.width(),
          h: $element.height()
        });
      });
      return {
        height: Math.max.apply(Math, columns),
        positions: positions
      };
    };

    Gridly.prototype.layout = function() {
      var $elements, structure,
        _this = this;
      $elements = this.$('> *');
      structure = this.structure($elements);
      $elements.each(function(index, element) {
        var $element, position;
        $element = $(element);
        position = structure.positions[index];
        return $element.css({
          position: 'absolute',
          left: position.x,
          top: position.y
        });
      });
      return this.$el.css({
        height: structure.height
      });
    };

    return Gridly;

  })();

  $.fn.extend({
    gridly: function(option) {
      if (option == null) {
        option = {};
      }
      return this.each(function() {
        var $this, action, options;
        $this = $(this);
        options = $.extend({}, $.fn.gridly.defaults, typeof option === "object" && option);
        action = typeof option === "string" ? option : option.action;
        if (action == null) {
          action = "layout";
        }
        return Gridly.gridly($this, options)[action]();
      });
    }
  });

}).call(this);
